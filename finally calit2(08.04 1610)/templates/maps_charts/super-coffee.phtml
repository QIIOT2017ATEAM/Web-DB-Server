<html>
<head>
<title>Marker Toggle Example by EFWJames</title>

<link type="text/css" rel="stylesheet" href="supercoffee.css">
    <script
              src="https://code.jquery.com/jquery-3.1.0.min.js"
              integrity="sha256-cCueBR6CsyA4/9szpPfrX3s49M9vUU5BgtiJj06wt/s="
              crossorigin="anonymous"></script>
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <script type="text/javascript">
        google.load("visualization", "1", {packages:["corechart"]});

var iconArr = ['http://maps.google.com/mapfiles/ms/icons/green-dot.png', 
'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png', 
'http://maps.google.com/mapfiles/ms/icons/orange-dot.png',
'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
'http://maps.google.com/mapfiles/ms/icons/purple-dot.png'];

    // Our data source object in json format 
    var markerJson = {
        "coffee1": {
            "name": "Urban Bean Coffee",
            "id" : 36,
            "coordinates": {
                "lat": 44.958813,
                "lng": -93.287918
            }
        },
        "coffee2": {
            "name": "Spyhouse Coffee",
            "id" : 83,
            "coordinates": {
                "lat": 44.998846,
                "lng": -93.246241
            }
        },
        "coffee3": {
            "name": "Blue Moon",
            "id" : 8282,
            "coordinates": {
                "lat": 44.948480,
                "lng": -93.216707
            }
        }
    };

    var dennydata = (function () {
        var json = null;
        $.ajax({
            'async': false,
            'global': false,
            'url': "denny_json.json",
            'dataType': "json",
            'success': function (data) {
                json = data;
            }
        });
        return json;
    })(); 

    // Set a global variable for map
    var map;
    // Initialize our goo
    function initAutocomplete() {
        var options = {
            center: {
                lat: 44.9812,
                lng: -93.2687
            },
            zoom: 10,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        }
        map = new google.maps.Map(document.getElementById("map_canvas"), options);

        // Create markers into DOM
        //지도에 마커를 만들어준다.
        createMarkers(markerJson);
        // Create controls dynamically after parsing json
        //지도에 마커를 표시하거나 숨길수있다.
        createControls(markerJson);

        var infoWin = new google.maps.InfoWindow();

        for (var hero in comics) {
            // Create marker 

            var marker = new google.maps.Marker({
              map: map,
              position: new google.maps.LatLng(comics[hero].center)
      
            });
            google.maps.event.addListener(marker, 'click', function(evt) {
              infoWin.setContent(comics[hero].city + ", " + comics[hero].state + " has s2: " + comics[hero].s2);
              infoWin.open(map, this);
            })
        }








// Create the search box and link it to the UI element.
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  // Bias the SearchBox results towards current map's viewport.
  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });





var markers = [];
  // [START region_getplaces]
  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }

    // Clear out the old markers.
   /* markers.forEach(function(marker) {
      marker.setMap(null);
    }); */

    // For each place, get the icon, name and location.
    var bounds = new google.maps.LatLngBounds();
    places.forEach(function(place) {

      // Create a marker for each place.
        

      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
  });




    };
//지도 map 끝부분
 



    // Instantiate markers in the background and pass it back to the json object
    function createMarkers(markerJson) {
        for (var id in markerJson) {
            var shop = markerJson[id];
            var marker = new google.maps.Marker({
                map: map,
                position: shop.coordinates,
                title: shop.name,
                id: shop.id,
                animation: google.maps.Animation.DROP
            });

            // This attaches unique infowindows to each marker
            // You could otherwise do a global infowindow var and have it overwrite itself
            marker.infowindow = new google.maps.InfoWindow({
                content: "This coffeeshop is called " + shop.name
            });

            marker.addListener('click', function() {
                drawChart(this.id);
                this.infowindow.open(map, this);
                });
            shop.marker = marker;
        }
    };

    // In this example create the controls dynamically with all checked, obj is each "coffee" listing
    function createControls(markerJson) {
        var html = "";
        for (var id in markerJson) {
            var shop = markerJson[id];
            html += '<li><a class="selected" href="#" id="' + id + '" onclick="toggleControl(this); return false"><input onclick="inputClick(this)" type="checkbox" checked id="' + id + '" />' + shop.name + '</a></li>';
        }
        document.getElementById("controls").innerHTML = html;
    };

    // Toggle class, checkbox state, and marker visibility
    function toggleControl(control) {

        var checkbox = control.getElementsByTagName("input")[0];
        var shop = markerJson[control.id];
            
        map.setCenter(shop.coordinates);
        if (checkbox.checked == true) { 
            checkbox.checked = false;
            control.className = "normal";
            shop.marker.setVisible(false); // If you have hundreds of markers use setMap(map)
        } else { 
            checkbox.checked = true;
            control.className = "selected";
            shop.marker.setVisible(true); // Similarly use setMap(null)
        }
    }; 

    // Cleanup function, resets controls, hides all markers, does not destroy
    function removeAll() {
        for (var id in markerJson) {
            var shop = markerJson[id];
            shop.marker.setVisible(false);
            document.getElementById(id).className = "normal";
            document.getElementById(id).getElementsByTagName("input")[0].checked = false;
        }
    };

    // In this case we are keeping the input box for accessibility purposes, so we bubble up the click event to the parent control
    function inputClick(input) {
        input.parentElement.click();
    };

    function drawChart(id) {
            var jsonData = $.ajax({
                url: "chartdata-as-json?id=id",
                dataType:"json",
                async: false
                }).responseText;
        // Create our data table out of JSON data loaded from server.
        var data = new google.visualization.DataTable(jsonData);
        
        var options = {
            width: 800, height: 480,
            title: 'Test_Name'
        };
        var chart = new google.visualization.LineChart(document.getElementById('chart_div_temp'));
        chart.draw(data, options);
        setInterval(drawChart, 2000);
    }
    </script>

    <style type="text/css">
    body { margin: 0; padding: 0; font: 100 1em/1em "Helvetica Neue"; letter-spacing: 0.05em;}
    .container { position: relative; margin-top: 50px; }
    #toggle_box { position: absolute; top: 100px; right: 30px; padding: 1em; background: #fff; z-index: 5; box-shadow: 0 5px 10px #777 }
    #map_canvas { width: 100%; height: 600px; }
    #chart { width: 100%; height: 600px; }
    #controls, #controls li { margin: 0; padding: 0; list-style: none; }
    #toggle_box a { display: block; color: #222; text-decoration: none; border-left: 2px solid #ccc; border-radius: 4px; box-shadow: inset 0 -2em 3em #ddd; padding: 1em; margin-bottom: 0.25em;  transition: all 400ms ease-in-out; }
    #toggle_box a:hover { background: #aaa; border-color: #555;}
    #controls input { border: 1px solid #888; }
    #controls a.selected { color: #fff; background: #888; border-color: #ff0000; box-shadow: none;}
    h1 { font: 200 1.2em/1em "Helvetica Neue";}
    </style>
    
</head>
<body>
<input id="pac-input" class="controls" type="text" placeholder="Search Box">

<div class="container">
    <div id="map_canvas"></div>

    <div id="toggle_box">
        <h1>My Favorite Coffee Shops</h1>
        <ul id="controls">
        </ul>
        <a href="#" onclick="removeAll(); return false;">Remove All Markers</a>
    </div>

    <div id="chart"></dib>
</div>

<div class='myLinkContainer'></div>
<div id="chart_div_temp"></div>
<div id="chart_div_oxygen"></div>

<!--<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCKdEnO5F6KsGtIzKRu8q3geEZe30JYrMA&libraries=places&callback=initAutocomplete"
         async defer></script> -->

         <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyAXMKBcstoboBgrHBcho5saILTBq3PHtPQ&libraries=places&callback=initAutocomplete"></script>

</body>
</html>